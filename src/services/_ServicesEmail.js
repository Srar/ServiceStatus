/* @flow */

import fs     from "fs";
import events from "events";
import superagent from "superagent";

import type { ServiceTaskModel } from "../models/ServiceTaskModel.js";

type EmailConfig = {
    ReportEmail: string,
    EmailHost: string,
    EmailAccount: string,
    EmailPassword: string,
};

export default class ServicesEmail {
    eventEmitter: events;
    emailConfig: EmailConfig;
    disabled: boolean;

    constructor(eventEmitter: events) {
        this.disabled = false;

        if (!fs.existsSync("./email.config.json")) {
            console.error("[ServicesEmail] Can't find [email.config.json] file.");
            this.disabled = true;
        }

        try {
            var configContent = fs.readFileSync("./email.config.json").toString();
            var config: any = JSON.parse(configContent);
            if (config.ReportEmail == undefined) throw "";
            if (config.EmailHost == undefined) throw "";
            if (config.EmailAccount == undefined) throw "";
            if (config.EmailPassword == undefined) throw "";
            this.emailConfig = {
                ReportEmail: config.ReportEmail.toString(),
                EmailHost: config.EmailHost.toString(),
                EmailAccount: config.EmailAccount.toString(),
                EmailPassword: config.EmailPassword.toString()
            }
        } catch (ex) {
            console.error("[ServicesEmail] Can't load [email.config.json] config. " + ex);
            this.disabled = true;
        }

        this.eventEmitter = eventEmitter;

        this.eventEmitter.on("normal", this.onNormal.bind(this));
        this.eventEmitter.on("warning", this.onWarning.bind(this));
        this.eventEmitter.on("err", this.onError.bind(this));
    }

    onNormal(taskModel: ServiceTaskModel) {

    }

    onWarning(taskModel: ServiceTaskModel) {

    }

    onError(taskModel: ServiceTaskModel) {
        if (this.disabled) {
            return;
        }

        if(!(taskModel.OtherSettings["ReportEmail"] != undefined && taskModel.OtherSettings["ReportEmail"] === true)) {
            return;
        }

        var postData = {
            server: this.emailConfig.EmailHost,
            username: this.emailConfig.EmailAccount,
            password: this.emailConfig.EmailPassword,
            email: this.emailConfig.ReportEmail,
            title: `Service Status Report - [${taskModel.Name}]`,
            content: `This message was generated by the service status running on: <br/> Service: [${taskModel.Name}] status error.`
        };

        superagent.post('https://authentication.x-speed.cc/postman').timeout(1000 * 15).send(postData).end((err, res) => {
            if (err) {
                console.error(`Send email error: ${err.toString()}`);
                return;
            }
            console.log(`Service [${taskModel.Name}] status send to [${this.emailConfig.ReportEmail}]`)
        });
    }

}